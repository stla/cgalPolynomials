// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// test
void test();
RcppExport SEXP _cgalPolynomials_test() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test();
    return R_NilValue;
END_RCPP
}
// test2
void test2(Rcpp::IntegerMatrix Powers, Rcpp::IntegerVector Coeffs);
RcppExport SEXP _cgalPolynomials_test2(SEXP PowersSEXP, SEXP CoeffsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Coeffs(CoeffsSEXP);
    test2(Powers, Coeffs);
    return R_NilValue;
END_RCPP
}
// test3
Rcpp::StringMatrix test3(Rcpp::IntegerMatrix Powers, Rcpp::IntegerVector Coeffs);
RcppExport SEXP _cgalPolynomials_test3(SEXP PowersSEXP, SEXP CoeffsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Coeffs(CoeffsSEXP);
    rcpp_result_gen = Rcpp::wrap(test3(Powers, Coeffs));
    return rcpp_result_gen;
END_RCPP
}
// test4
Rcpp::StringMatrix test4(Rcpp::IntegerMatrix Powers, Rcpp::NumericVector Coeffs);
RcppExport SEXP _cgalPolynomials_test4(SEXP PowersSEXP, SEXP CoeffsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Coeffs(CoeffsSEXP);
    rcpp_result_gen = Rcpp::wrap(test4(Powers, Coeffs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cgalPolynomials_test", (DL_FUNC) &_cgalPolynomials_test, 0},
    {"_cgalPolynomials_test2", (DL_FUNC) &_cgalPolynomials_test2, 2},
    {"_cgalPolynomials_test3", (DL_FUNC) &_cgalPolynomials_test3, 2},
    {"_cgalPolynomials_test4", (DL_FUNC) &_cgalPolynomials_test4, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_cgalPolynomials(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
